%D \module
%D   [       file=m-luagraph,
%D        version=2019.01.20,
%D          title=\CONTEXT\ Extra Modules,
%D       subtitle=\METAPOST\ graph module rewrite,
%D         author=Alan Braslau,
%D           date=\currentdate,
%D      copyright={PRAGMA ADE \& \CONTEXT\ Development Team}]
%C
%C This module is part of the \CONTEXT\ macro||package and is
%C therefore copyrighted by \PRAGMA. See mreadme.pdf for
%C details.

\unprotect

\defineMPinstance
  [graph]
  [\s!format=metafun,
   \s!extensions=\v!yes,
   \s!initializations=\v!yes,
   \c!method=\s!double]

\startMPdefinitions{graph}
    loadmodule "luag" ;
\stopMPdefinitions

\registerctxluafile{luagraph}{}

\protect


\continueifinputfile{m-luagraph.mkxl}

\setupbodyfont   [dejavu-condensed,10pt]
\setupwhitespace [small]

%\enabletrackers[metapost*]
%\enabletrackers[metapost.scripts]
%\enabletrackers[metapost.lua]

\starttext

\startsubject [title=luagraph]

This is a complete re|-|write of the John Hobby graph macros keeping
\italic {just} the basic syntax, while allowing to deviate \bold {wherever}
this seems appropriate. We make heavy use of \Lua\ for the efficient reading
and manipulation of data.

Data is \quotation {drawn} according to its own coordinates and then
transformed to the graph or drawing space. Linear, logarithmic,
square|-|root, polar, (or any number of) coordinate systems can be used.

The question arises: should the interface remain John Hobby \METAPOST|-|like
or should we introduce some \CONTEXT|-|like options (key=value lists)?
In the present experiment, we stick to a \METAPOST\ interface and see
where we can go with the Hobby \italic {graph} syntax. Alternately,
Hans is experimenting with other simple graph|-|producing macros as a
part of \METAFUN\ having a syntax that parallels usage in \CONTEXT. We
will see ultimately in which direction we should go.


\startsubsubject [title=Coordinate systems]

The following tests six different coordinate systems, drawing the
function $f(x) = 90\sin (2π/360) x$ over the $x$-domain $[0,255]$.
It also, just for fun, fits the function to a $n$th degree polynomial
where $n$ varies from 0 to 5.

\startMPcode{graph}

ahlength := EmWidth ; ahvariant := 1 ;
%ticmarklength := EmWidth/2 ;

color c[] ;
c0 := black ;
c1 := red ;
c2 := green ;
c3 := blue ;
c4 := cyan ;
c5 := magenta ;
c6 := yellow ;

% a function to plot (and fit)

% trick not to have a conditional test in the "for" loop:
def insert_dotdot = hide(def insert_dotdot = .. enddef) enddef ;
path p ; p := for i=0 upto 225: insert_dotdot (i,90sind(i)) endfor ;

l := 0 ;
forsuffixes k=LinLin, LinSqrt, LinLog, LogLin, LogLog, SqrtSqrt :
    startgraph (if unknown gframe:
                  image(fillup roundedsquare(.8TextWidth,.125TextHeight,2ExHeight)
                        withcolor .75white ;)fi)
        setcoordinates(k) ;
        draw thetextext.lrt(coordinates,urcorner frame) ;
        gdraw p withpen currentpen scaled 3 ;

        path q ;
        for i=0 upto 5 :
            q := polynomialfit.p(i+1,1) ;
            gdraw q withcolor c[i] ;
            glabel.ulft(formatted("@.4g",fitChiSq), infinity) withcolor c[i] ;
           %for j=0 upto i : glabel(formatted("@.4g",fitC(j)), infinity)
           %                 shifted (0,-j*.5LineHeight) withcolor c[i] ; endfor
        endfor
        autogrid.llft(5) withcolor .5white ;
        drawarrow frame.lft ;
        drawarrow frame.bot ;
    stopgraph shifted (0,-l*.15TextHeight) ;
    l := l + 1 ;
endfor

\stopMPcode

\stopsubsubject

\startsubsubject [title=linear vs. logarithmic vs. polar]

The following tests graphing a Gaussian function,
$f(x) = 100e^{-0.5(x/σ)^2}$, centered at 12 and having a width $σ$ of
$\frac18$, drawn over the $x$-domain $[0,24]$. It is drawn on a linear,
on a logarithmic, and then on a polar scale for comparison.

If you are curious, this could be roughly the hourly solar pattern
for a site centered on its time zone.

\blank

\startMPcode{graph}

%polarscale := 24 ;

def insert_dotdot = hide(def insert_dotdot = .. enddef) enddef ;
p := for i=0 step .25 until 24 :
     insert_dotdot (i,100*exp(-.5*((i/24-.5)**2/((3/24)**2)))) endfor ;

j := 0 ;
forsuffixes k=LinLin, LinLog :
    startgraph (.8TextWidth,.175TextHeight)
        setcoordinates(k)  ;
        setscale(whatever,0,whatever,whatever) ;
        gdraw p ;
       %gplot p ; % alternately:
       %gdraw p withsymbol □ ;
        for i=0 upto 24 :
            glabel(decimal i,point (i/24*length p) of p) withcolor red ;
        endfor
        autogrid.lrt(5,1) withcolor .5white ;
        drawarrow frame.lft ;
        drawarrow frame.bot ;
        label.top(coordinates, frame) ;
        label.bot("time (hours)", frame) shifted (down*LineHeight) ;
    stopgraph shifted (0,-j*.25TextHeight) ;
    j := j + 1 ;
endfor

\stopMPcode

\startMPcode{graph}

path f ; 
f := reverse fullcircle scaled .8TextWidth rotated 90 ;
f := subpath (4/24*length f,20/24*length f) of f ;

startgraph (f--origin--cycle)
    setcoordinates(Polar,"24") ;
    setscale((4,0),(20,whatever)) ;
    gdraw p withcolor red ;
    for i=0 upto 24 :
        glabel(decimal i,point (i/24*length p) of p) withcolor red ;
    endfor
    autogrid.lrt(5,1) withcolor .5white ;
    draw thetextext.top(coordinates, 1cm*up) ;
    drawarrow origin--point 0 of f ;
    drawarrow f ;
    label.bot("time (hours)", frame) ;
stopgraph ;

\stopMPcode

\stopsubsubject

\stopsubject

\stoptext
